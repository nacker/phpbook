// TODO 代码中的成员:
// * 1. 数据
// * 2. 操作

// Chrome控制台: 内置的JS执行器, 浏览器中用的
// console.log(): 将计算结果输出到控制台,可以用在node中

// * 程序: 描述任务的操作流程, 默认"顺序执行"
// * 顺序执行: 计算机中专业的叫法"同步执行"
// * 同步执行: 代码执行顺序与书写顺序一致
// console.log(1);
// console.log(2);

// ! (1) 数据

10;
20;

// * 字面量: 直接可以看到值
// 如果10, 20, 后面还要用?
// 可以用一个容器, 将他们缓存起来, 这个临时存放数据的容器: "变量"

// 为了数据的复用: 使用了"变量"

// * 只要涉及到了"复用", 必须要有2步:
// * 1. 声明过程: 仅定义, 不执行,  方便编译预处理
// * 2. 执行过程: 复用的过程, 可以多次,多个地方调用声明的语句

// * 第一步: 变量声明
// 为了将变量与"作用域"进行绑定
let a;
let b;
// * 第二步: 执行, 赋值(第一次叫:初始化)
a = 10;
b = 20;
// 第二次赋值叫什么? 更新 / 修改
a = 15;
// 删除
// a = null;

// 按名使用, 才能实现:数据复用
console.log(a, b);
// 变量禁止重复声明
// let a;

// *--------------------------------------------------/

// ! (2) 操作

// 操作写到哪?  写到代码块中
// 代码块: 一段由"大括号 {...}"包裹的代码
{
  // 代码块
}

// 以二数求和为例
{
  a + b;
}

// * 使用代码块的目的, 是为了"代码复用"
// 如果是一次性的执行,不需要代码块
console.log(a + b);

// 复用代码必分二步:
// 1. 声明过程
// 2. 执行过程

// * 1. 声明函数
// function : 声明函数
// sum: 函数名称
// (a,b): 参数列表
// return : 返回结果
function sum(a, b) {
  return a + b;
  //   下面这条语句永不执行,因为上面return
  //   console.log(123);
}

// * 2. 调用函数
console.log(sum(15, 20));
console.log(sum(a, b));
a = 30;
b = 50;
console.log(sum(a, b));
/**
 * todo 总结:
 * * 1. 代码主要成员: 变量与函数
 * * 2. 变量与函数: 代码复用技术
 */

/**
 * todo 变量总结:
 * * 1. 变量: 数据复用
 * * 2. 变量声明: let
 * * 3. 变量引用: 变量名
 */

/**
 * todo 函数总结
 * * 1. 函数: 操作复用
 * * 2. 声明: function
 * * 3. 调用: 函数名(...)
 */
